#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const router = require('../routes');

const debug = require('debug')('server:server');
const http = require('http');
const session = require('express-session');

const {
  NODE_ENV,
  PORT,
  SECRET,
} = process.env;

const options = {
	secret: SECRET,
  secure: false,
	resave: false,
	saveUninitialized: false,
}

if (NODE_ENV === 'production') {
  app.set('trust proxy', 1) // trust first proxy
  sessionOptions.secure = true // serve secure cookies
}
app.use(session(options));

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

router(app);
/**
 * Create HTTP server.
 */

const httpServer = http.createServer(app);
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
